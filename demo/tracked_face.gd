extends Node3D


# Dictionary of expressions to blend-shapes available on the face model
const _expressions := {
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_BROW_LOWERER_L : XRFaceTracker.FT_BROW_DOWN_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_BROW_LOWERER_R : XRFaceTracker.FT_BROW_DOWN_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHEEK_PUFF_L : XRFaceTracker.FT_CHEEK_PUFF_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHEEK_PUFF_R : XRFaceTracker.FT_CHEEK_PUFF_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHEEK_RAISER_L : XRFaceTracker.FT_CHEEK_SQUINT_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHEEK_RAISER_R : XRFaceTracker.FT_CHEEK_SQUINT_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHEEK_SUCK_L : XRFaceTracker.FT_CHEEK_SUCK_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHEEK_SUCK_R : XRFaceTracker.FT_CHEEK_SUCK_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHIN_RAISER_B : XRFaceTracker.FT_MOUTH_RAISER_LOWER,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_CHIN_RAISER_T : XRFaceTracker.FT_MOUTH_RAISER_UPPER,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_DIMPLER_L : XRFaceTracker.FT_MOUTH_DIMPLE_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_DIMPLER_R : XRFaceTracker.FT_MOUTH_DIMPLE_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_CLOSED_L : XRFaceTracker.FT_EYE_CLOSED_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_CLOSED_R : XRFaceTracker.FT_EYE_CLOSED_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_DOWN_L : XRFaceTracker.FT_EYE_LOOK_DOWN_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_DOWN_R : XRFaceTracker.FT_EYE_LOOK_DOWN_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_LEFT_L : XRFaceTracker.FT_EYE_LOOK_OUT_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_LEFT_R : XRFaceTracker.FT_EYE_LOOK_IN_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_RIGHT_L : XRFaceTracker.FT_EYE_LOOK_IN_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_RIGHT_R : XRFaceTracker.FT_EYE_LOOK_OUT_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_UP_L : XRFaceTracker.FT_EYE_LOOK_UP_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_EYES_LOOK_UP_R : XRFaceTracker.FT_EYE_LOOK_UP_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_JAW_DROP : XRFaceTracker.FT_JAW_OPEN,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_JAW_SIDEWAYS_LEFT : XRFaceTracker.FT_JAW_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_JAW_SIDEWAYS_RIGHT : XRFaceTracker.FT_JAW_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_JAW_THRUST : XRFaceTracker.FT_JAW_FORWARD,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_CORNER_DEPRESSOR_L : XRFaceTracker.FT_MOUTH_FROWN_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_CORNER_DEPRESSOR_R : XRFaceTracker.FT_MOUTH_FROWN_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_CORNER_PULLER_L : XRFaceTracker.FT_MOUTH_SMILE_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_CORNER_PULLER_R : XRFaceTracker.FT_MOUTH_SMILE_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_FUNNELER_LB : XRFaceTracker.FT_LIP_FUNNEL_LOWER_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_FUNNELER_LT : XRFaceTracker.FT_LIP_FUNNEL_UPPER_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_FUNNELER_RB : XRFaceTracker.FT_LIP_FUNNEL_LOWER_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_FUNNELER_RT : XRFaceTracker.FT_LIP_FUNNEL_UPPER_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_PRESSOR_L : XRFaceTracker.FT_MOUTH_PRESS_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_PRESSOR_R : XRFaceTracker.FT_MOUTH_PRESS_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_STRETCHER_L : XRFaceTracker.FT_MOUTH_STRETCH_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_STRETCHER_R : XRFaceTracker.FT_MOUTH_STRETCH_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_SUCK_LB : XRFaceTracker.FT_LIP_SUCK_LOWER_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_SUCK_LT : XRFaceTracker.FT_LIP_SUCK_UPPER_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_SUCK_RB : XRFaceTracker.FT_LIP_SUCK_LOWER_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_SUCK_RT : XRFaceTracker.FT_LIP_SUCK_UPPER_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_TIGHTENER_L : XRFaceTracker.FT_MOUTH_TIGHTENER_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIP_TIGHTENER_R : XRFaceTracker.FT_MOUTH_TIGHTENER_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LIPS_TOWARD : XRFaceTracker.FT_MOUTH_CLOSED,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LOWER_LIP_DEPRESSOR_L : XRFaceTracker.FT_MOUTH_LOWER_DOWN_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_LOWER_LIP_DEPRESSOR_R : XRFaceTracker.FT_MOUTH_LOWER_DOWN_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_MOUTH_LEFT : XRFaceTracker.FT_MOUTH_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_MOUTH_RIGHT : XRFaceTracker.FT_MOUTH_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_NOSE_WRINKLER_L : XRFaceTracker.FT_NOSE_SNEER_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_NOSE_WRINKLER_R : XRFaceTracker.FT_NOSE_SNEER_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_OUTER_BROW_RAISER_L : XRFaceTracker.FT_BROW_OUTER_UP_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_OUTER_BROW_RAISER_R : XRFaceTracker.FT_BROW_OUTER_UP_RIGHT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_UPPER_LIP_RAISER_L : XRFaceTracker.FT_MOUTH_UPPER_UP_LEFT,
	OpenXRFbFaceTrackingExtensionWrapper.EXPRESSION_UPPER_LIP_RAISER_R : XRFaceTracker.FT_MOUTH_UPPER_UP_RIGHT,
}


# Face mesh
@onready var face : MeshInstance3D = $Face/Face

# Face tracker
var _tracker := XRFaceTracker.new()


func _ready() -> void:
	# Register the face tracker
	XRServer.add_face_tracker("/user/head", _tracker)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta : float) -> void:
	# Get the weights
	var weights := OpenXRFbFaceTrackingExtensionWrapper.get_weights()
	if weights.is_empty():
		return

	# Populate the provider
	for i in _expressions:
		_tracker.set_blend_shape(_expressions[i], weights[i])
